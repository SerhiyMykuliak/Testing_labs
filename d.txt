import axios from "axios";

const BASE_URL = 'https://petstore.swagger.io/v2';

describe('GET tests (A specific record)', () => {

  test('GET /pet/{petId} should return a pet with the correct id', async () => {
    const petId = 10;
    let response = await axios.get(`${BASE_URL}/pet/${petId}`);
    
    expect(response.status).toBe(200);
  });

  test('GET /pet/{petId} should return 404 for a non-existing pet', async () => {
    const petId = 9999999; 
    try {
      let response = await axios.get(`${BASE_URL}/pet/${petId}`);
    } catch (error) {
      expect(error.response.status).toBe(404);
    }
  });

  test('GET /store/order/{orderId} should return an order with the correct id', async () => {
    const orderId = 5;
    let response = await axios.get(`${BASE_URL}/store/order/${orderId}`);
    
    expect(response.status).toBe(200);
  });

  test('GET /store/order/{orderId} should return 404 for a non-existing order', async () => {
    const orderId = 9999999; 
    try {
      let response = await axios.get(`${BASE_URL}/store/order/${orderId}`);
    } catch (error) {
      expect(error.response.status).toBe(404);
    }
  });
  

  test('GET /user/{username} should return an user with the correct name', async () => {
    const userName = "johndoe";
    let response = await axios.get(`${BASE_URL}/user/${userName}`);
    
    expect(response.status).toBe(200);
  });

});

describe('GET tests (All records)', () => {

  test('GET /pet/findByStatus should return list of pets', async () => {
    let response = await axios.get(`${BASE_URL}/pet/findByStatus?status=sold`);
    
    expect(response.status).toBe(200);
  });

  test('GET /store/inventory should return ', async () => {
    let response = await axios.get(`${BASE_URL}/store/inventory`);
    expect(response.status).toBe(200);
  });

});

describe('POST tests)', () => {


});

describe('PUT tests)', () => {


});

describe('DELETE tests)', () => {


});