import axios from "axios";

const BASE_URL = 'https://petstore.swagger.io/v2';

describe('GET tests (One record))', () => {
  let response;
  const petId = 9;

  beforeAll(async () => {
    response = await axios.get(`${BASE_URL}/pet/${petId}`);
  })

  test("should return status 200", () => {
    expect(response.status).toBe(200);
  });

  test("should return correct pet id", () => {
    expect(response.data.id).toBe(petId);
  });

  test("should have defined body", () => {
    expect(response.data).toBeDefined();
  });

  test("pet should have id, name, photoUrls, tags and status properties", () => {
    expect(response.data).toHaveProperty('id');
    expect(response.data).toHaveProperty('name');
  });

  test("should have correct data types for each property", () => {
    expect(typeof response.data.id).toBe('number');
    expect(typeof response.data.name).toBe('string');
  });

});

describe('GET tests (All record)', () => {
  let response;

  beforeAll(async () => {
    response = await axios.get(`${BASE_URL}/pet/findByStatus?status=sold`);
  })

  test("should return status 200", () => {
    expect(response.status).toBe(200);
  });

  test("should return an array of pets", () => {
    expect(response.data).toBeInstanceOf(Array);
  });

  test("should return status text OK", () => {
    expect(response.statusText).toBe("OK");
  });

  test("each pet's status should be 'sold'", () => {
    response.data.forEach(pet => {
      expect(pet.status).toBe('sold');
    });
  });
  
  test("should not return pets with null or undefined status", () => {
    response.data.forEach(pet => {
      expect(pet.status).not.toBeNull();
      expect(pet.status).not.toBeUndefined();
    });
  });
});

describe('POST tests', () => {
  let response;
  let requestData;

  beforeAll(async () => {
    requestData = {
      id: 0,
      category: {
        id: 1,
        name: "Dog"
      },
      name: "Bulldog",
      photoUrls: ["https://example.com/photo.jpg"],
      tags: [{ id: 1, name: "bulldog" }],
      status: "available"
    };

    response = await axios.post(`${BASE_URL}/pet`, requestData);
  })

  test("should return status 200", () => {
    expect(response.status).toBe(200);
  });

  test("should return status text OK", () => {
    expect(response.statusText).toBe("OK");
  });

  test("should have defined body", () => {
    expect(response.data).toBeDefined();
  });

  test("should include an autogenerated ID", () => {
    expect(response.data.id).toBeDefined();
    expect(typeof response.data.id).toBe("number");
  });
  
  test("should create a new pet successfully", () => {
    expect(response.data.id).toBeGreaterThan(0);
    expect(response.data.name).toBe(requestData.name);
    expect(response.data.status).toBe(requestData.status);
    expect(response.data.photoUrls).toEqual(requestData.photoUrls);
    expect(response.data.category).toEqual(requestData.category);
    expect(response.data.tags).toEqual(requestData.tags);
  });
});

describe('PUT tests', () => {
  let response;
  let updatedData;

  beforeAll(async () => {
    updatedData = {
      id: 1,
      category: {
        id: 2,
        name: "Cat"
      },
      name: "Persian",
      photoUrls: ["https://example.com/newphoto.jpg"],
      tags: [{ id: 2, name: "persian" }],
      status: "available"
    };

    response = await axios.put(`${BASE_URL}/pet`, updatedData);
  });

  test("should return status 200", () => {
    expect(response.status).toBe(200);
  });

  test("should return status text OK", () => {
    expect(response.statusText).toBe("OK");
  });

  test("should have defined body", () => {
    expect(response.data).toBeDefined();
  });

  test("should return a response with the correct content-type", () => {
    expect(response.headers["content-type"]).toContain("application/json");
  });

  test("should return updated pet successfully", () => {
    expect(response.data.id).toBe(updatedData.id);
    expect(response.data.name).toBe(updatedData.name);
    expect(response.data.status).toBe(updatedData.status);
    expect(response.data.photoUrls).toEqual(updatedData.photoUrls);
    expect(response.data.category).toEqual(updatedData.category);
    expect(response.data.tags).toEqual(updatedData.tags);
  });

});

describe('DELETE tests', () => {
  const petId = 5;
  let response;

  beforeAll(async () => {
    response = await axios.delete(`${BASE_URL}/pet/${petId}`);
  });

  test('should return status 200', () => {
    expect(response.status).toBe(200);
  });

  test('should have defined body', () => {
    expect(response.data).toBeDefined();
  });

  test('should return correct deletion response', () => {
    expect(response.data).toHaveProperty('code', 200);
    expect(response.data).toHaveProperty('type', 'unknown');
    expect(response.data).toHaveProperty('message', `${petId}`);
  });

  test('should have correct data types', () => {
    expect(typeof response.data.code).toBe('number');
    expect(typeof response.data.type).toBe('string');
    expect(typeof response.data.message).toBe('string');
  });


  test('should return status 404 if trying to delete a non-existent pet', async () => {
    const nonExistentPetId = 99999999;
    try {
      await axios.delete(`${BASE_URL}/pet/${nonExistentPetId}`);
      
    } catch (error) {
      expect(error.response.status).toBe(404);
    }
  });
});
